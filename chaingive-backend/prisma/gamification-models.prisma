// ============================================
// GAMIFICATION SYSTEM - ADMIN CONTROLLED
// ============================================
// Add these models to your main schema.prisma

// ============================================
// ADMIN CONFIGURATION
// ============================================

model GamificationConfig {
  id          String   @id @default(uuid())
  
  // Mission Configuration
  missionsEnabled       Boolean  @default(true)
  missionBonusReward    Int      @default(50)
  weekendMultiplier     Float    @default(1.5)
  
  // Streak Configuration
  streakEnabled         Boolean  @default(true)
  streakRewards         Json     @default("{\"1\":10,\"2\":15,\"3\":20,\"4\":25,\"5\":30,\"6\":40,\"7\":50,\"14\":100,\"30\":250,\"60\":500,\"90\":1000}")
  
  // Progress Rings Configuration
  ringsEnabled          Boolean  @default(true)
  ringPerfectDayBonus   Int      @default(100)
  giveGoal              Int      @default(1)
  earnGoal              Int      @default(50)
  engageGoal            Int      @default(3)
  
  // Weekly Challenge Configuration
  challengesEnabled     Boolean  @default(true)
  
  // Achievement Configuration
  achievementsEnabled   Boolean  @default(true)
  
  // Metadata
  updatedAt   DateTime  @updatedAt
  updatedBy   String?   // Admin user ID
  
  @@map("gamification_config")
}

model MissionTemplate {
  id          String   @id @default(uuid())
  
  type        String   // donate, buy_coins, refer, leaderboard, marketplace, profile_update, kyc_submit
  name        String
  description String
  reward      Int      // Coins awarded
  icon        String   @default("check-circle")
  
  // Scheduling
  isActive    Boolean  @default(true)
  priority    Int      @default(0)
  daysOfWeek  Json     @default("[0,1,2,3,4,5,6]") // Array of days (0=Sunday, 6=Saturday)
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  updatedBy   String?  // Admin user ID
  
  @@index([type])
  @@index([isActive])
  @@map("mission_templates")
}

// ============================================
// USER DATA
// ============================================

model DailyMission {
  id        String   @id @default(uuid())
  userId    String
  date      DateTime @default(now())
  
  // Mission 1
  mission1Type    String
  mission1Name    String
  mission1Desc    String
  mission1Done    Boolean  @default(false)
  mission1Reward  Int      @default(50)
  
  // Mission 2
  mission2Type    String
  mission2Name    String
  mission2Desc    String
  mission2Done    Boolean  @default(false)
  mission2Reward  Int      @default(30)
  
  // Mission 3
  mission3Type    String
  mission3Name    String
  mission3Desc    String
  mission3Done    Boolean  @default(false)
  mission3Reward  Int      @default(20)
  
  // Completion
  allCompleted    Boolean  @default(false)
  bonusReward     Int      @default(50)
  totalCoinsEarned Int     @default(0)
  
  // Timestamps
  createdAt DateTime @default(now())
  completedAt DateTime?
  
  // Relations
  user      User     @relation("UserDailyMissions", fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, date])
  @@index([userId])
  @@index([date])
  @@map("daily_missions")
}

model DailyStreak {
  id              String    @id @default(uuid())
  userId          String    @unique
  
  // Streak tracking
  currentStreak   Int       @default(0)
  longestStreak   Int       @default(0)
  lastLoginDate   DateTime?
  
  // Rewards
  totalCoinsEarned Int      @default(0)
  streakLevel     String    @default("bronze")  // bronze, silver, gold, platinum, diamond
  
  // Milestones achieved
  milestones      Json      @default("[]")  // [7, 14, 30, 60, 90]
  
  // Timestamps
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  user            User      @relation("UserStreak", fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("daily_streaks")
}

model DailyProgress {
  id        String   @id @default(uuid())
  userId    String
  date      DateTime @default(now())
  
  // Ring 1: GIVE (Make donations)
  giveGoal      Int      @default(1)
  giveProgress  Int      @default(0)
  giveClosed    Boolean  @default(false)
  
  // Ring 2: EARN (Buy coins or refer)
  earnGoal      Int      @default(50)
  earnProgress  Int      @default(0)
  earnClosed    Boolean  @default(false)
  
  // Ring 3: ENGAGE (App interactions)
  engageGoal    Int      @default(3)
  engageProgress Int     @default(0)
  engageClosed  Boolean  @default(false)
  
  // Perfect Day Bonus
  allRingsClosed Boolean @default(false)
  bonusAwarded   Boolean @default(false)
  bonusAmount    Int     @default(100)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation("UserDailyProgress", fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, date])
  @@index([userId])
  @@index([date])
  @@map("daily_progress")
}

model WeeklyChallenge {
  id            String   @id @default(uuid())
  
  // Challenge details
  name          String
  description   String
  type          String   // donations, coin_purchases, referrals, leaderboard
  
  // Goals
  targetValue   Int
  rewardCoins   Int      @default(500)
  rewardType    String?  // coins, badge, boost, multiplier
  rewardValue   String?  // JSON for complex rewards
  
  // Schedule
  startDate     DateTime
  endDate       DateTime
  weekNumber    Int
  
  // Status
  isActive      Boolean  @default(true)
  createdBy     String?  // Admin user ID
  
  // Timestamps
  createdAt     DateTime @default(now())
  
  // Relations
  progress      WeeklyChallengeProgress[]
  
  @@index([isActive])
  @@index([startDate, endDate])
  @@map("weekly_challenges")
}

model WeeklyChallengeProgress {
  id            String   @id @default(uuid())
  userId        String
  challengeId   String
  
  // Progress
  currentValue  Int      @default(0)
  targetValue   Int
  percentage    Int      @default(0)
  
  // Completion
  completed     Boolean  @default(false)
  completedAt   DateTime?
  rewardClaimed Boolean  @default(false)
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  user          User             @relation("UserWeeklyChallenges", fields: [userId], references: [id], onDelete: Cascade)
  challenge     WeeklyChallenge  @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  
  @@unique([userId, challengeId])
  @@index([userId])
  @@index([challengeId])
  @@map("weekly_challenge_progress")
}

model Achievement {
  id            String   @id @default(uuid())
  
  // Achievement details
  code          String   @unique
  name          String
  description   String
  category      String   // donations, coins, referrals, streaks, social
  
  // Requirements
  requirementType  String  // donation_count, coin_purchase_total, referral_count, streak_days
  requirementValue Int
  
  // Rewards
  rewardCoins   Int      @default(0)
  rewardBadge   String?
  tier          String   // bronze, silver, gold, platinum, diamond
  
  // Display
  icon          String
  color         String   @default("#FFD700")
  isSecret      Boolean  @default(false)
  
  // Status
  isActive      Boolean  @default(true)
  createdBy     String?  // Admin user ID
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  unlocked      UserAchievement[]
  
  @@index([category])
  @@index([tier])
  @@map("achievements")
}

model UserAchievement {
  id            String   @id @default(uuid())
  userId        String
  achievementId String
  
  // Unlock details
  unlockedAt    DateTime @default(now())
  progress      Int      @default(0)
  maxProgress   Int
  
  // Display
  isNew         Boolean  @default(true)
  viewedAt      DateTime?
  
  // Relations
  user          User        @relation("UserAchievements", fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  @@unique([userId, achievementId])
  @@index([userId])
  @@index([unlockedAt])
  @@map("user_achievements")
}

model GamificationStats {
  id        String   @id @default(uuid())
  userId    String   @unique
  
  // Overall stats
  totalCoinsEarned        Int  @default(0)
  totalMissionsCompleted  Int  @default(0)
  totalPerfectDays        Int  @default(0)
  totalAchievements       Int  @default(0)
  
  // Current week
  weeklyMissionsCompleted Int  @default(0)
  weeklyPerfectDays       Int  @default(0)
  
  // Levels (optional for future)
  level         Int      @default(1)
  experience    Int      @default(0)
  nextLevelXP   Int      @default(100)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation("UserGamificationStats", fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("gamification_stats")
}

// ChainGive Database Schema
// Based on Technical Architecture Document v2.4

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id                    String    @id @default(uuid())
  phoneNumber           String    @unique @map("phone_number")
  email                 String?   @unique
  passwordHash          String    @map("password_hash")
  firstName             String    @map("first_name")
  lastName              String    @map("last_name")
  role                  String    @default("beginner") // beginner, agent, power_partner, csc_council
  tier                  Int       @default(1) // 1, 2, 3
  trustScore            Decimal   @default(5.00) @map("trust_score") @db.Decimal(3, 2)
  totalCyclesCompleted  Int       @default(0) @map("total_cycles_completed")
  totalDonated          Decimal   @default(0) @map("total_donated") @db.Decimal(12, 2)
  totalReceived         Decimal   @default(0) @map("total_received") @db.Decimal(12, 2)
  charityCoinsBalance   Int       @default(0) @map("charity_coins_balance")
  kycStatus             String    @default("pending") @map("kyc_status") // pending, approved, rejected
  isActive              Boolean   @default(true) @map("is_active")
  isBanned              Boolean   @default(false) @map("is_banned")
  banReason             String?   @map("ban_reason")
  preferredLanguage     String    @default("en") @map("preferred_language") // en, pidgin, yo, ha, ig
  locationCity          String?   @map("location_city")
  locationState         String?   @map("location_state")
  locationCountry       String    @default("NG") @map("location_country")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")
  lastLoginAt           DateTime? @map("last_login_at")

  // Relations
  wallet                Wallet?
  kycRecords            KycRecord[]
  agent                 Agent?
  sentTransactions      Transaction[] @relation("TransactionFrom")
  receivedTransactions  Transaction[] @relation("TransactionTo")
  cycles                Cycle[]
  donorMatches          Match[] @relation("MatchDonor")
  recipientMatches      Match[] @relation("MatchRecipient")
  redemptions           Redemption[]
  verifiedBy            KycRecord[] @relation("VerifiedBy")

  @@index([phoneNumber])
  @@index([email])
  @@index([role])
  @@index([trustScore])
  @@map("users")
}

// Wallet Management
model Wallet {
  id                  String   @id @default(uuid())
  userId              String   @unique @map("user_id")
  fiatBalance         Decimal  @default(0.00) @map("fiat_balance") @db.Decimal(12, 2)
  receivableBalance   Decimal  @default(0.00) @map("receivable_balance") @db.Decimal(12, 2)
  pendingObligations  Decimal  @default(0.00) @map("pending_obligations") @db.Decimal(12, 2)
  totalInflows        Decimal  @default(0.00) @map("total_inflows") @db.Decimal(12, 2)
  totalOutflows       Decimal  @default(0.00) @map("total_outflows") @db.Decimal(12, 2)
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("wallets")
}

// Transaction Management
model Transaction {
  id                  String    @id @default(uuid())
  transactionRef      String    @unique @map("transaction_ref")
  type                String    // deposit, withdrawal, donation_sent, donation_received, marketplace_redemption
  fromUserId          String?   @map("from_user_id")
  toUserId            String?   @map("to_user_id")
  amount              Decimal   @db.Decimal(12, 2)
  fee                 Decimal   @default(0.00) @db.Decimal(12, 2)
  netAmount           Decimal   @map("net_amount") @db.Decimal(12, 2)
  status              String    @default("pending") // pending, in_transit, completed, failed, refunded
  paymentMethod       String?   @map("payment_method") // bank_transfer, opay, palmpay, flutterwave, paystack
  paymentProviderRef  String?   @map("payment_provider_ref")
  cycleId             String?   @map("cycle_id")
  metadata            Json?
  blockchainTxHash    String?   @map("blockchain_tx_hash")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")
  completedAt         DateTime? @map("completed_at")

  // Relations
  fromUser      User?          @relation("TransactionFrom", fields: [fromUserId], references: [id])
  toUser        User?          @relation("TransactionTo", fields: [toUserId], references: [id])
  cycle         Cycle?         @relation(fields: [cycleId], references: [id])
  escrows       Escrow[]
  blockchainLog BlockchainLog?

  @@index([transactionRef])
  @@index([fromUserId])
  @@index([toUserId])
  @@index([status])
  @@index([createdAt])
  @@map("transactions")
}

// Escrow Management
model Escrow {
  id            String    @id @default(uuid())
  transactionId String    @map("transaction_id")
  amount        Decimal   @db.Decimal(12, 2)
  status        String    @default("holding") // holding, released, refunded
  holdUntil     DateTime  @map("hold_until")
  releasedAt    DateTime? @map("released_at")
  refundedAt    DateTime? @map("refunded_at")
  refundReason  String?   @map("refund_reason")
  createdAt     DateTime  @default(now()) @map("created_at")

  // Relations
  transaction Transaction @relation(fields: [transactionId], references: [id])

  @@index([transactionId])
  @@index([status])
  @@index([holdUntil])
  @@map("escrows")
}

// Donation Cycles
model Cycle {
  id                   String    @id @default(uuid())
  userId               String    @map("user_id")
  amount               Decimal   @db.Decimal(12, 2)
  status               String    @default("pending") // pending, in_transit, received, obligated, fulfilled, defaulted
  receivedFromUserId   String?   @map("received_from_user_id")
  givenToUserId        String?   @map("given_to_user_id")
  receivedTransactionId String?  @map("received_transaction_id")
  givenTransactionId   String?   @map("given_transaction_id")
  dueDate              DateTime? @map("due_date")
  receivedAt           DateTime? @map("received_at")
  fulfilledAt          DateTime? @map("fulfilled_at")
  daysToFulfill        Int?      @map("days_to_fulfill")
  charityCoinsEarned   Int       @default(0) @map("charity_coins_earned")
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")

  // Relations
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]

  @@index([userId])
  @@index([status])
  @@index([dueDate])
  @@map("cycles")
}

// Matching System
model Match {
  id              String    @id @default(uuid())
  donorId         String    @map("donor_id")
  recipientId     String    @map("recipient_id")
  amount          Decimal   @db.Decimal(12, 2)
  status          String    @default("pending") // pending, accepted, rejected, expired, completed
  priorityScore   Decimal?  @map("priority_score") @db.Decimal(5, 2)
  matchedAt       DateTime  @default(now()) @map("matched_at")
  expiresAt       DateTime? @map("expires_at")
  acceptedAt      DateTime? @map("accepted_at")
  completedAt     DateTime? @map("completed_at")
  rejectionReason String?   @map("rejection_reason")
  createdAt       DateTime  @default(now()) @map("created_at")

  // Relations
  donor     User @relation("MatchDonor", fields: [donorId], references: [id])
  recipient User @relation("MatchRecipient", fields: [recipientId], references: [id])

  @@index([donorId])
  @@index([recipientId])
  @@index([status])
  @@map("matches")
}

// KYC Management
model KycRecord {
  id                String    @id @default(uuid())
  userId            String    @map("user_id")
  verificationType  String    @map("verification_type") // phone, email, bvn, nin, agent, selfie
  verificationData  Json?     @map("verification_data")
  status            String    @default("pending") // pending, approved, rejected
  verifiedByUserId  String?   @map("verified_by_user_id")
  verifiedAt        DateTime? @map("verified_at")
  rejectionReason   String?   @map("rejection_reason")
  createdAt         DateTime  @default(now()) @map("created_at")

  // Relations
  user       User  @relation(fields: [userId], references: [id])
  verifiedBy User? @relation("VerifiedBy", fields: [verifiedByUserId], references: [id])

  @@unique([userId, verificationType])
  @@index([userId])
  @@index([status])
  @@map("kyc_records")
}

// Agent Management
model Agent {
  id                 String    @id @default(uuid())
  userId             String    @unique @map("user_id")
  agentCode          String    @unique @map("agent_code")
  totalVerifications Int       @default(0) @map("total_verifications")
  totalCommissions   Decimal   @default(0.00) @map("total_commissions") @db.Decimal(12, 2)
  rating             Decimal   @default(5.00) @db.Decimal(3, 2)
  totalRatings       Int       @default(0) @map("total_ratings")
  isActive           Boolean   @default(true) @map("is_active")
  suspendedUntil     DateTime? @map("suspended_until")
  suspensionReason   String?   @map("suspension_reason")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([agentCode])
  @@map("agents")
}

// Marketplace
model MarketplaceListing {
  id              String   @id @default(uuid())
  vendorName      String   @map("vendor_name")
  itemName        String   @map("item_name")
  description     String?
  category        String? // airtime, data, vouchers, services
  coinPrice       Int      @map("coin_price")
  realValue       Decimal  @map("real_value") @db.Decimal(12, 2)
  stockQuantity   Int      @default(0) @map("stock_quantity")
  isInStock       Boolean  @default(true) @map("is_in_stock")
  paymentMethods  String[] @map("payment_methods")
  rating          Decimal  @default(0.00) @db.Decimal(3, 2)
  totalRatings    Int      @default(0) @map("total_ratings")
  totalRedemptions Int     @default(0) @map("total_redemptions")
  imageUrl        String?  @map("image_url")
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  redemptions Redemption[]

  @@index([category])
  @@index([isActive])
  @@map("marketplace_listings")
}

model Redemption {
  id             String    @id @default(uuid())
  userId         String    @map("user_id")
  listingId      String    @map("listing_id")
  coinsSpent     Int       @map("coins_spent")
  realValue      Decimal   @map("real_value") @db.Decimal(12, 2)
  status         String    @default("pending") // pending, processing, completed, failed
  deliveryMethod String?   @map("delivery_method") // instant, manual, voucher_code
  deliveryData   Json?     @map("delivery_data")
  completedAt    DateTime? @map("completed_at")
  createdAt      DateTime  @default(now()) @map("created_at")

  // Relations
  user    User               @relation(fields: [userId], references: [id])
  listing MarketplaceListing @relation(fields: [listingId], references: [id])

  @@index([userId])
  @@index([listingId])
  @@index([status])
  @@map("redemptions")
}

// Blockchain Logging
model BlockchainLog {
  id            String    @id @default(uuid())
  transactionId String    @unique @map("transaction_id")
  blockchain    String    @default("polygon")
  txHash        String    @unique @map("tx_hash")
  blockNumber   BigInt?   @map("block_number")
  gasUsed       BigInt?   @map("gas_used")
  gasPrice      BigInt?   @map("gas_price")
  status        String    @default("pending") // pending, confirmed, failed
  confirmations Int       @default(0)
  metadata      Json?
  createdAt     DateTime  @default(now()) @map("created_at")
  confirmedAt   DateTime? @map("confirmed_at")

  // Relations
  transaction Transaction @relation(fields: [transactionId], references: [id])

  @@index([transactionId])
  @@index([txHash])
  @@map("blockchain_logs")
}

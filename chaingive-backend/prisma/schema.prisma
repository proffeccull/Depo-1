// Add to existing schema.prisma

model CommunityPost {
  id                String   @id @default(cuid())
  authorId          String
  title             String
  content           String   @db.Text
  postType          String   // 'success_story', 'testimonial', 'featured_request', 'announcement'
  mediaUrls         String[] @default([])
  metadata          Json     @default("{}")
  status            String   @default("pending_moderation") // 'pending_moderation', 'approved', 'rejected', 'flagged'
  likesCount        Int      @default(0)
  sharesCount       Int      @default(0)
  reportsCount      Int      @default(0)
  moderatedAt       DateTime?
  moderatedBy       String?
  moderationReason  String?
  eventId           String?  // Link to community event if it's an event announcement
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  author            User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  event             CommunityEvent? @relation(fields: [eventId], references: [id])
  likes             CommunityPostLike[]
  shares            CommunityPostShare[]
  reports           PostReport[]

  @@map("community_posts")
}

model CommunityEvent {
  id                String   @id @default(cuid())
  creatorId         String
  title             String
  description       String   @db.Text
  eventDate         DateTime
  eventTime         String
  location          String
  maxAttendees      Int?
  currentAttendees  Int      @default(0)
  eventType         String   // 'fundraising', 'community_meeting', 'workshop', 'celebration'
  fundraisingGoal   Decimal? @db.Decimal(15, 2)
  status            String   @default("active") // 'active', 'cancelled', 'completed'
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  creator           User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  rsvps             EventRSVP[]
  posts             CommunityPost[]

  @@map("community_events")
}

model CommunityPostLike {
  id        String @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  post      CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("community_post_likes")
}

model CommunityPostShare {
  id        String @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  post      CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("community_post_shares")
}

model EventRSVP {
  id        String @id @default(cuid())
  eventId   String
  userId    String
  status    String @default("attending") // 'attending', 'maybe', 'declined'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  event     CommunityEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@map("event_rsvps")
}

model PostReport {
  id          String @id @default(cuid())
  postId      String
  reporterId  String
  reason      String
  description String?
  status      String @default("pending") // 'pending', 'reviewed', 'dismissed'
  reviewedAt  DateTime?
  reviewedBy  String?
  createdAt   DateTime @default(now())

  post        CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  reporter    User          @relation(fields: [reporterId], references: [id], onDelete: Cascade)

  @@map("post_reports")
}

model ModerationLog {
  id         String @id @default(cuid())
  postId     String
  moderatorId String
  action     String // 'approve', 'reject', 'flag'
  reason     String?
  createdAt  DateTime @default(now())

  post       CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  moderator  User          @relation(fields: [moderatorId], references: [id], onDelete: Cascade)

  @@map("moderation_logs")
}

// Update User model to include community relations
model User {
  // ... existing fields ...

  // Community relations
  communityPosts      CommunityPost[]
  createdEvents       CommunityEvent[]
  postLikes           CommunityPostLike[]
  postShares          CommunityPostShare[]
  eventRsvps          EventRSVP[]
  postReports         PostReport[]
  moderationLogs      ModerationLog[]

  // ... rest of existing model ...
}
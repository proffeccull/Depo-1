// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
// ============================================
// COMMUNITY VOTING SYSTEM
// ============================================

model VotingProposal {
  id            String   @id @default(uuid())
  title         String
  description   String
  category      String   // feature_request, charity_category, platform_improvement, governance
  status        String   @default("active") // active, passed, rejected, expired

  // Voting configuration
  votingType    String   @default("simple") // simple, ranked, quadratic
  minVotes      Int      @default(10)
  maxVotes      Int?     // For quadratic voting
  durationHours Int      @default(168) // 7 days default

  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  votingEndsAt  DateTime

  // Rewards
  rewardCoins   Int      @default(0)
  rewardType    String?  // coins, badge, multiplier

  // Relations
  createdBy     String
  creator       User     @relation("UserProposals", fields: [createdBy], references: [id])
  votes         Vote[]

  // Admin controls
  isActive      Boolean  @default(true)
  adminOverride Boolean  @default(false)

  @@index([status])
  @@index([votingEndsAt])
  @@index([category])
  @@map("voting_proposals")
}

model Vote {
  id          String @id @default(uuid())
  userId      String
  proposalId  String

  // Vote data
  voteType    String // yes, no, abstain (for simple voting)
  voteWeight  Int    @default(1) // For quadratic voting
  votePower   Float  @default(1.0) // Trust score multiplier

  // Metadata
  votedAt     DateTime @default(now())
  ipAddress   String?
  userAgent   String?

  // Relations
  user        User            @relation("UserVotes", fields: [userId], references: [id])
  proposal    VotingProposal  @relation(fields: [proposalId], references: [id])

  @@unique([userId, proposalId])
  @@index([userId])
  @@index([proposalId])
  @@map("votes")
}

model VotingConfig {
  id                String @id @default(uuid())

  // Global voting settings
  votingEnabled     Boolean @default(true)
  minTrustScore     Float  @default(0.0)
  quadraticEnabled  Boolean @default(false)
  anonymousVoting   Boolean @default(false)

  // Reward settings
  baseVoteReward    Int    @default(5)
  proposalReward    Int    @default(50)
  winningReward     Int    @default(100)

  // Cooldowns
  voteCooldownHours Int    @default(1)
  proposalCooldownHours Int @default(24)

  updatedAt         DateTime @updatedAt
  updatedBy         String?

  @@map("voting_config")
}

// ============================================
// DONATION IMPACT TRACKING
// ============================================

model DonationImpact {
  id            String   @id @default(uuid())
  userId        String
  transactionId String   @unique

  // Impact metrics
  peopleHelped      Int    @default(1)
  amountContributed Decimal @default(0)
  impactScore       Float  @default(0.0)

  // Categorization
  category          String // education, healthcare, food, housing, emergency
  subcategory       String?
  location          String?
  faithPreference   String?

  // Story and media
  storyTitle        String?
  storyContent      String?
  storyImageUrl     String?
  storyVideoUrl     String?

  // Verification
  isVerified        Boolean @default(false)
  verifiedBy        String?
  verifiedAt        DateTime?

  // Engagement
  views             Int     @default(0)
  shares            Int     @default(0)
  likes             Int     @default(0)

  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user              User        @relation("UserImpacts", fields: [userId], references: [id])
  transaction       Transaction @relation("TransactionImpacts", fields: [transactionId], references: [id])

  @@index([userId])
  @@index([category])
  @@index([isVerified])
  @@map("donation_impacts")
}

model ImpactCategory {
  id          String @id @default(uuid())
  name        String @unique
  description String
  icon        String
  color       String @default("#4CAF50")

  // Configuration
  isActive    Boolean @default(true)
  priority    Int     @default(0)

  // Stats
  totalImpacts Int @default(0)
  totalAmount  Decimal @default(0)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isActive])
  @@map("impact_categories")
}

// ============================================
// REWARD MULTIPLIERS
// ============================================

model RewardMultiplier {
  id          String   @id @default(uuid())

  // Multiplier details
  name        String
  description String
  multiplier  Float    @default(1.0)
  type        String   // global, user_specific, event_based, time_based

  // Activation conditions
  isActive    Boolean  @default(true)
  startDate   DateTime?
  endDate     DateTime?

  // Target users (null for global)
  targetUsers String[] // User IDs array

  // Source tracking
  source      String   // system, admin, event, achievement

  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?

  @@index([isActive])
  @@index([type])
  @@index([startDate, endDate])
  @@map("reward_multipliers")
}

// ============================================
// ENHANCED CREW SYSTEM
// ============================================

model CrewChallenge {
  id            String   @id @default(uuid())
  crewId        String
  challengeId   String

  // Challenge progress
  totalTarget   Int
  currentTotal  Int      @default(0)
  isCompleted   Boolean  @default(false)
  completedAt   DateTime?

  // Reward distribution
  rewardType    String   @default("equal") // equal, proportional, leader_bonus
  totalReward   Int
  isDistributed Boolean  @default(false)

  // Member contributions
  memberContributions Json // { userId: contributionAmount }

  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  crew          Crew     @relation("CrewChallenges", fields: [crewId], references: [id])
  challenge     WeeklyChallenge @relation("ChallengeCrews", fields: [challengeId], references: [id])

  @@unique([crewId, challengeId])
  @@index([crewId])
  @@index([isCompleted])
  @@map("crew_challenges")
}

// Core Models
model User {
  id                String   @id @default(cuid())
  firstName         String
  lastName          String
  email             String?  @unique
  phoneNumber       String   @unique
  role              String   @default("regular")
  tier              String   @default("Tier 1")
  trustScore        Float    @default(0.0)
  isAgent           Boolean  @default(false)
  isVerified        Boolean  @default(false)
  balance           Decimal  @default(0)
  charityCoins      Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  proposals         VotingProposal[] @relation("UserProposals")
  votes             Vote[]           @relation("UserVotes")
  impacts           DonationImpact[] @relation("UserImpacts")
  transactions      Transaction[]    @relation("UserTransactions")

  @@map("users")
}

model Transaction {
  id                String   @id @default(cuid())
  userId            String
  amount            Decimal
  type              String
  status            String   @default("pending")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user              User             @relation("UserTransactions", fields: [userId], references: [id])
  impact            DonationImpact?  @relation("TransactionImpacts")

  @@map("transactions")
}

model Crew {
  id                String   @id @default(cuid())
  name              String
  description       String?
  memberCount       Int      @default(0)
  totalDonations    Decimal  @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  crewChallenges    CrewChallenge[] @relation("CrewChallenges")

  @@map("crews")
}

model WeeklyChallenge {
  id                String   @id @default(cuid())
  title             String
  description       String
  targetAmount      Decimal
  startDate         DateTime
  endDate           DateTime
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  crewChallenges    CrewChallenge[] @relation("ChallengeCrews")

  @@map("weekly_challenges")
}
